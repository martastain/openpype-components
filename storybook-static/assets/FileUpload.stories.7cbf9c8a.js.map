{"version":3,"file":"FileUpload.stories.7cbf9c8a.js","sources":["../../src/FileUpload/FileUpload.tsx"],"sourcesContent":["import { useState, useRef, useMemo, forwardRef } from 'react'\nimport styled from 'styled-components'\n\nconst UploadForm = styled.form`\n  height: 200px;\n  width: 300px;\n  text-align: center;\n  position: relative;\n\n  input {\n    display: none;\n  }\n\n  label {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n    border-width: 2px;\n    border-radius: 1rem;\n    border-style: dashed;\n    border-color: #6b7685;\n    background-color: transparent;\n\n    &.drag-active {\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n  }\n\n  span {\n    font-size: 1.2rem;\n  }\n\n  small {\n    color: #e53e3e !important;\n    font-size: 0.8rem;\n  }\n\n  button {\n    cursor: pointer;\n    background-color: transparent;\n    border: none;\n    color: #3182ce;\n    font-weight: 600;\n    font-size: 1rem;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  #drag-file-element {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border-radius: 1rem;\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n  }\n`\n\nconst FileList = styled.ul`\n  list-style: none;\n  padding: 10%;\n  margin: 0;\n  font-size: 0.8rem;\n  overflow-y: auto;\n  width: 100%;\n\n  li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button {\n      background-color: transparent;\n      border: none;\n      color: #e53e3e;\n      font-weight: 600;\n      font-size: 1rem;\n      cursor: pointer;\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n  }\n`\n\nexport interface FileUploadProps extends React.HTMLAttributes<HTMLFormElement> {\n  files: File[]\n  setFiles: React.Dispatch<React.SetStateAction<File[]>>\n  mode?: 'single' | 'multiple' | 'sequence'\n  validExtensions?: string[]\n  showMaxFiles?: number\n  style?: React.CSSProperties\n  className?: string\n}\n\nexport const FileUpload = forwardRef<HTMLFormElement, FileUploadProps>(\n  (\n    {\n      files,\n      setFiles,\n      mode = 'single',\n      validExtensions,\n      showMaxFiles = 4,\n      style,\n      className,\n      ...formProps\n    },\n    ref,\n  ) => {\n    // Valid modes: single, multiple, sequence\n\n    const [dragActive, setDragActive] = useState(false)\n    const [errorMessage, setErrorMessage] = useState<string | null>(null)\n    const inputRef = useRef<HTMLInputElement | null>(null)\n    const multiple = mode === 'multiple' || mode === 'sequence'\n\n    // handles the drag events\n    const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      if (e.type === 'dragenter' || e.type === 'dragover') {\n        setDragActive(true)\n      } else if (e.type === 'dragleave') {\n        setDragActive(false)\n      }\n    }\n\n    const handleFiles = (newFiles: FileList) => {\n      const acceptedFiles: File[] = []\n\n      for (const file of newFiles) {\n        if (validExtensions) {\n          const extension = file.name.split('.').pop()\n          if (!extension || !validExtensions.includes(extension)) {\n            setErrorMessage(`Invalid file type: ${extension}`)\n            return\n          }\n        }\n\n        if (mode === 'sequence') {\n          // TODO: Handle sequence validation\n        }\n\n        acceptedFiles.push(file)\n        if (!multiple) {\n          break\n        }\n      }\n      setErrorMessage(null)\n      if (!acceptedFiles) return\n      if (mode === 'single') setFiles([acceptedFiles[0]])\n      else setFiles((files) => [...(files || []), ...acceptedFiles])\n    }\n\n    // triggers when file is dropped\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      setDragActive(false)\n      if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n        handleFiles(e.dataTransfer.files)\n      }\n    }\n\n    // triggers when file is selected with click\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      e.preventDefault()\n      if (e.target.files && e.target.files[0]) {\n        handleFiles(e.target.files)\n      }\n    }\n\n    // triggers the input when the button is clicked\n    const onButtonClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n      inputRef.current?.click()\n    }\n\n    const onFileRemove = (event: React.MouseEvent<HTMLButtonElement>, idx: number) => {\n      event.preventDefault()\n      event.stopPropagation()\n      if (idx === -1) {\n        setFiles([])\n        if (inputRef.current) inputRef.current.value = ''\n      } else {\n        const newFiles = [...files]\n        newFiles.splice(idx, 1)\n        setFiles(newFiles)\n      }\n    }\n\n    const formContents = useMemo(() => {\n      if (files?.length > showMaxFiles) {\n        return (\n          <>\n            <span>{files.length} files selected</span>\n            <button onClick={(e) => onFileRemove(e, -1)}>clear</button>\n          </>\n        )\n      } else if (files?.length) {\n        return (\n          <FileList>\n            {files.map((file, idx) => (\n              <li key={idx}>\n                {file.name}\n                <button onClick={(e) => onFileRemove(e, idx)}>x</button>\n              </li>\n            ))}\n          </FileList>\n        )\n      } else {\n        return (\n          <>\n            <span>Drag and drop your file here or</span>\n            <button className=\"upload-button\" onClick={onButtonClick}>\n              upload a file\n            </button>\n            <small>{errorMessage}</small>\n          </>\n        )\n      }\n    }, [files, errorMessage])\n\n    return (\n      <UploadForm\n        // onDragEnter={handleDrag}\n        onSubmit={(e) => e.preventDefault()}\n        style={style}\n        className={className}\n        ref={ref}\n        {...formProps}\n      >\n        <input\n          ref={inputRef}\n          type=\"file\"\n          id=\"input-file-upload\"\n          multiple={multiple}\n          onChange={handleChange}\n        />\n\n        <label\n          id=\"label-file-upload\"\n          htmlFor=\"input-file-upload\"\n          className={dragActive ? 'drag-active' : ''}\n        >\n          {formContents}\n        </label>\n\n        {dragActive && (\n          <div\n            id=\"drag-file-element\"\n            onDragEnter={handleDrag}\n            onDragLeave={handleDrag}\n            onDragOver={handleDrag}\n            onDrop={handleDrop}\n          />\n        )}\n      </UploadForm>\n    )\n  },\n)\n"],"names":["UploadForm","styled","FileList","FileUpload","forwardRef","files","setFiles","validExtensions","style","className","ref","dragActive","setDragActive","useState","errorMessage","setErrorMessage","inputRef","useRef","multiple","mode","handleDrag","e","handleFiles","newFiles","acceptedFiles","file","extension","handleDrop","handleChange","onButtonClick","onFileRemove","event","idx","formContents","useMemo","showMaxFiles","_jsxs","_Fragment","_jsx","formProps"],"mappings":"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"}