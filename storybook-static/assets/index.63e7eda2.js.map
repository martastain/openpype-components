{"version":3,"file":"index.63e7eda2.js","sources":["../../src/Layout/OverflowField/OverflowField.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { forwardRef, isValidElement } from 'react'\n\nconst OverflowFieldStyled = styled.div<Pick<OverflowFieldProps, 'align'> & { isNode: boolean }>`\n  position: relative;\n\n  width: 100%;\n  display: flex;\n  justify-content: ${({ align }) => (align === 'left' ? 'flex-start' : 'flex-end')};\n  overflow-x: clip;\n\n  span:first-child {\n    white-space: nowrap;\n  }\n\n  ${({ isNode }) =>\n    !isNode &&\n    css`\n      margin-right: 4px;\n    `}\n`\n\nconst OverflowStringStyled = styled.span`\n  /* overflow */\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  padding: 0 3px;\n`\n\nconst RevealStringStyled = styled.span<Pick<OverflowFieldProps, 'align'>>`\n  position: absolute;\n  background-color: var(--color-grey-01);\n  border-radius: 3px;\n  right: ${({ align }) => (align === 'left' ? 'unset' : 0)};\n  left: ${({ align }) => (align === 'left' ? 0 : 'unset')};\n  word-break: break-all;\n  cursor: pointer;\n  max-width: 100%;\n  z-index: 10;\n\n  transition: height 0.2s;\n  overflow-y: hidden;\n  height: 18px;\n\n  opacity: 0;\n  padding: 0 3px;\n\n  :hover {\n    opacity: 1;\n    height: auto;\n    box-shadow: 0 0 8px 0 rgb(0 0 0 / 20%);\n    transition: opacity 0.2s;\n  }\n`\n\nexport interface OverflowFieldProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onClick'> {\n  value?: string | number | React.ReactNode\n  align?: 'left' | 'right'\n  onClick?: (value: string) => void\n}\n\nexport const OverflowField = forwardRef<HTMLDivElement, OverflowFieldProps>(\n  ({ value = '', style, align = 'right', onClick }, ref) => {\n    let isNode = false\n\n    //   check if value is a react node\n    if (value && typeof value === 'object' && !Array.isArray(value) && isValidElement(value)) {\n      isNode = true\n    }\n\n    return (\n      <OverflowFieldStyled style={style} align={align} isNode={isNode} ref={ref}>\n        {isNode ? value : <OverflowStringStyled>{value}</OverflowStringStyled>}\n        {!isNode && (\n          <RevealStringStyled\n            onClick={() => value && onClick && onClick(value.toString())}\n            align={align}\n          >\n            {value}\n          </RevealStringStyled>\n        )}\n      </OverflowFieldStyled>\n    )\n  },\n)\n"],"names":["OverflowFieldStyled","styled","div","align","isNode","css","OverflowStringStyled","RevealStringStyled","span","OverflowField","forwardRef","value","style","onClick","ref","isValidElement","_jsxs"],"mappings":"mIAGA,MAAAA,EAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmCC,CAAAA,CAKb,MAAAC,CAAQ,IAAAA,IAAA,OAAA,aAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAyC,CAAA,CAOlE,OAAAC,CAAS,IAAA,CAAAA,GAAAC;AAAAA;AAAAA;AAAAA,EAOdC,EAAAL,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASAM,EAAAN,EAAA;AAAA;AAAA;AAAA;AAAA,WAAkCO,CAAAA,CAItB,MAAAL,CAAQ,IAAAA,IAAA,OAAA,QAAA;AAAA,UAAoC,CAAA,CAC7C,MAAAA,CAAQ,IAAAA,IAAA,OAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BZM,EAAAC,EAAA,QAAA,WAAA,CAAA,CACJ,MAAAC,EAAA,GAAU,MAAAC,EAAIA,MAAAA,EAAAA,QAAe,QAAAC,CAAiB,EAAAC,IAAA,CAC7C,IAAAV,EAAA,GAGA,OAAAO,GAAA,OAAAA,GAAA,UAAA,CAAA,MAAA,QAAAA,CAAA,GAAAI,yBAAAJ,CAAA,IACEP,EAAAA,IAGFY,EAAAhB,EAAA,CACsB,MAAAY,EAACA,MAAAA,EAAcT,OAAAA,EAAcC,IAAAA,EAAgBU,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CACxB,SAAAH,CAAEA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAEpB,QAAA,IAAAA,GAAAE,GAAAA,EAAAF,EAAA,UAAA,EAC0C,MAAAR,EAC3DA,SAAAA,CAECQ,CAAAA,CAAAA,CAEJ,CAAA,CAGP,CAAA"}