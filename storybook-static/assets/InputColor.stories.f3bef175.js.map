{"version":3,"file":"InputColor.stories.f3bef175.js","sources":["../../src/helpers/hexToFloat.js","../../src/helpers/int8ToHex.js","../../src/helpers/floatToInt8.js","../../src/helpers/toHexColor.ts","../../src/helpers/validateHexColor.js","../../src/helpers/floatToInt16.js","../../src/Inputs/InputColor/ColorPickerPreview.tsx","../../src/Inputs/InputColor/InputColor.tsx"],"sourcesContent":["// takes a color hex value and returns a number between 0-1\nconst hexToFloat = (hex) =>\n  Math.max(Math.min(Math.round((parseInt(hex, 16) / 255) * 100) / 100, 1), 0)\n\nexport default hexToFloat\n","// converts a int8 (0-255) to a hex value\nconst int8ToHex = (value) => Math.min(Math.max(value, 0), 255).toString(16)\n\nexport default int8ToHex\n","const floatToInt8 = (value) => Math.max(Math.min(Math.round(value * 255), 255), 0)\n\nexport default floatToInt8\n","// conversions for different formats to HEX color format\nconst toHexColor = (value: number[] = [], format: string) => {\n  const formats = ['float', 'uint8', 'uint16']\n\n  // return error if format is not supported\n  if (!formats.includes(format)) return console.error(`Format: ${format} is not supported`)\n\n  //   between 0 - 255\n  let int8 = []\n\n  // normalise all formats down to a 8bit int between 0-255 (hex is 8bit)\n  if (format === 'float') {\n    // value is float 0-1\n    int8 = value.map((v) => v * 255)\n  } else if (format === 'uint16') {\n    // value is int16\n    int8 = value.map((v) => (v / 65535) * 255)\n  } else {\n    // format must be int8 already\n    int8 = value\n  }\n\n  //   ensure int8 is a whole interger between 0-255\n  int8 = int8.map((v) => Math.max(Math.min(Math.round(v), 255), 0))\n\n  // convert int8 to hex for each channel\n  const hex = '#' + ((1 << 24) | (int8[0] << 16) | (int8[1] << 8) | int8[2]).toString(16).slice(1)\n\n  return hex\n}\n\nexport default toHexColor\n","const validateHexColor = (newValue, oldValue) => {\n  // ^# first character match #\n  // [0-9a-f]{3} match exactly 3 chars between 0-9 and a-f\n  // {1,2}  match 3 chars 1 or 2 times\n  // /i ignore case\n  const hexReg = /^#([0-9a-f]{3}){1,2}$/i\n  // if fails use initValue\n  if (!hexReg.test(newValue)) newValue = oldValue\n\n  return newValue\n}\n\nexport default validateHexColor\n","const floatToInt16 = (value) => Math.max(Math.min(Math.round(value * 65535), 65535), 0)\n\nexport default floatToInt16\n","import { ChangeEvent, FC, FocusEvent, forwardRef } from 'react'\nimport styled, { css } from 'styled-components'\n\n// types\nexport interface ColorPickerPreviewProps {\n  onClick?: () => void\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void\n  backgroundColor?: string\n  value?: string\n  onBlur?: (e: FocusEvent<HTMLInputElement>) => void\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: grid;\n  margin-right: 5px;\n  min-height: var(--base-input-size);\n  max-height: var(--base-input-size);\n  max-width: var(--base-input-size);\n  min-width: var(--base-input-size);\n\n  & > * {\n    grid-row: 1;\n    grid-column: 1;\n\n    border-radius: var(--base-input-border-radius);\n  }\n`\n\nconst Input = styled.input`\n  /* if disabled remove click events */\n  pointer-events: ${(props) => props.disabled && 'none'};\n  cursor: pointer;\n\n  width: 100%;\n  height: 100%;\n\n  &:focus {\n    outline: 1px solid var(--color-hl-00);\n  }\n`\n\nconst Checkerboard = styled.span`\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n\n  /* DOES NOT SUPPORT IE or pre-Chromium Edge */\n  background: repeating-conic-gradient(#808080 0% 25%, rgb(51 51 51) 0% 50%) 50% / 15px 15px;\n`\n\nconst ColorButton = styled.button`\n  color: var(--color-text);\n  border: 1px solid var(--color-grey-03);\n  cursor: pointer;\n  margin: 0;\n\n  /* if disabled remove click events */\n  pointer-events: ${(props) => props.disabled && 'none'};\n\n  &:focus {\n    outline: 1px solid var(--color-hl-00);\n  }\n\n  &.error,\n  &:invalid {\n    border-color: var(--color-hl-error);\n  }\n`\n\nconst ColorPickerPreview = forwardRef<HTMLDivElement, ColorPickerPreviewProps>(\n  ({ onClick, onChange, backgroundColor, value, onBlur }, ref) => {\n    return (\n      <Wrapper ref={ref}>\n        <Input\n          type=\"color\"\n          disabled={!onChange}\n          tabIndex={!onChange ? -1 : 0}\n          onChange={onChange && onChange}\n          value={value}\n          onBlur={onBlur}\n        />\n        <Checkerboard />\n        <ColorButton\n          style={{\n            backgroundColor: backgroundColor,\n            pointerEvents: onClick ? 'auto' : 'none',\n          }}\n          disabled={!onClick}\n          tabIndex={!onClick ? -1 : 0}\n          onClick={onClick}\n        />\n      </Wrapper>\n    )\n  },\n)\n\nexport default ColorPickerPreview\n","import styled from 'styled-components'\nimport { HTMLAttributes, forwardRef, useEffect, useRef, useState } from 'react'\nimport hexToFloat from '../../helpers/hexToFloat'\nimport int8ToHex from '../../helpers/int8ToHex'\nimport floatToInt8 from '../../helpers/floatToInt8'\nimport toHexColor from '../../helpers/toHexColor'\nimport validateHexColor from '../../helpers/validateHexColor'\n\nimport floatToInt16 from '../../helpers/floatToInt16'\nimport { Button } from '../../Button/Button'\nimport { InputNumber } from '../InputNumber'\nimport { InputText } from '../InputText'\nimport ColorPickerPreview from './ColorPickerPreview'\nimport { Dialog } from '../../Overlay/Dialog'\n\nconst ColorInputs = styled.div`\n  display: flex;\n  align-items: center;\n\n  input[type='number'],\n  input[type='text'] {\n    margin: 5px;\n  }\n\n  input[type='number'] {\n    width: 70px;\n    margin: 5px;\n  }\n`\n\nconst Confirmations = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: var(--base-gap-large);\n  margin-top: 12px;\n`\n\nconst formatsConfig = {\n  hex: {\n    placeholder: '#34C95C',\n  },\n  float: {\n    placeholder: 0.5,\n    step: 0.01,\n    max: 1,\n  },\n\n  uint8: {\n    placeholder: 255,\n    step: 1,\n    max: 255,\n  },\n  uint16: {\n    placeholder: 65535,\n    step: 1,\n    max: 65535,\n  },\n}\n\nexport interface InputColorProps {\n  value: string | number[]\n  onChange: (event: { target: { value: string | number[] } }) => void\n  alpha?: boolean\n  format?: 'hex' | 'float' | 'uint8' | 'uint16'\n  className?: string\n  style?: HTMLAttributes<HTMLDivElement>['style']\n}\n\n// REACT FUNCTIONAL COMPONENT\nexport const InputColor = forwardRef<HTMLDivElement, InputColorProps>(\n  ({ value, onChange, alpha, format = 'hex', className, style }, ref) => {\n    const isHex = format === 'hex'\n\n    let initValue: string | number[]\n    let initAlpha: number = 1\n\n    const previewRef = useRef(null)\n\n    if (isHex) {\n      initValue = value\n      // check value is a string\n      if (!(typeof initValue === 'string')) initValue = '#FFFFFF'\n      // remove alpha from value and add to localAlpha\n      initAlpha = alpha ? hexToFloat(initValue.slice(7, 9)) : 1\n\n      // no hex alpha should default to 1\n      if (value.length < 8) initAlpha = 1\n      initValue = initValue.slice(0, 7)\n    } else {\n      initValue = [...(value as number[])]\n      // validate value is in correct format\n      if (!Array.isArray(value)) initValue = [0, 0, 0]\n\n      // remove alpha from  value and add to localAlpha\n      if (alpha) {\n        if (initValue[3] || initValue[3] == 0) {\n          initAlpha = initValue[3]\n        } else initAlpha = 1\n      }\n      initValue = initValue.slice(0, 3)\n    }\n\n    // use local state and then update global state once dialog closes\n    const [localValue, setLocalValue] = useState<string | number[]>(initValue)\n    const [localAlpha, setLocalAlpha] = useState<number>(initAlpha)\n    const [dialogOpen, setDialogOpen] = useState(false)\n\n    useEffect(() => {\n      // update state when value changes\n      setLocalAlpha(initAlpha)\n      setLocalValue(initValue)\n    }, [value, setLocalAlpha, setLocalValue])\n\n    // set channel inputs\n    const channels = ['r', 'g', 'b']\n\n    const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      e.preventDefault()\n      const { id, value: targetValue } = e.target\n\n      let newValue\n      if (isHex) {\n        newValue = targetValue\n      } else {\n        // create copy of current value\n        newValue = [...(localValue as number[])]\n        // replace new colour value in array\n        newValue.splice(channels.indexOf(id), 1, parseFloat(targetValue))\n      }\n      // update state\n      setLocalValue(newValue)\n    }\n\n    const handleColorInputOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      e.preventDefault()\n      // handles the native color input on change (always a hex string)\n      const value = e.target?.value\n\n      // if format is hex no conversion required\n      if (isHex) return setLocalValue(value)\n\n      let floats: number[] = []\n      if (value) {\n        // convert to floats\n        const matches = value.slice(1, 7).match(/.{1,2}/g)\n\n        if (matches) {\n          floats = matches.map((v) => hexToFloat(v))\n        }\n      }\n\n      if (format === 'float') return setLocalValue(floats)\n\n      if (format === 'uint8') return setLocalValue(floats.map((v) => floatToInt8(v)))\n\n      if (format === 'uint16') return setLocalValue(floats.map((v) => floatToInt16(v)))\n    }\n\n    const handleOpenDialog = () => {\n      setDialogOpen(true)\n    }\n\n    const handleConfirmDialog = () => {\n      // close dialog\n      setDialogOpen(false)\n      let newState\n\n      // VALIDATE VALUES\n      if (isHex) {\n        newState = localValue\n        // validate hex string\n        newState = validateHexColor(newState, initValue)\n      } else if (Array.isArray(localValue)) {\n        newState = [...localValue]\n        // validate all numbers\n        newState = newState.map((v, i) => (isNaN(v) ? initValue[i] : parseFloat(v.toString())))\n      }\n      console.log(localValue)\n\n      // update local state\n      setLocalValue(newState)\n\n      // add alphas back to value\n      if (alpha) {\n        // validate alpha is number\n        let newAlpha = localAlpha && isNaN(localAlpha) ? initAlpha : localAlpha\n        // clamp alpha\n        newAlpha = Math.min(Math.max(newAlpha || 1, 0), 1)\n\n        // update local state\n        setLocalAlpha(newAlpha)\n        if (isHex) {\n          // convert local alpha to text\n          newState = newState + (newAlpha > 0 ? int8ToHex(floatToInt8(newAlpha)) : '00')\n        } else {\n          // add in alpha value\n          newState = [...newState, newAlpha]\n        }\n      }\n\n      // create an event object to return\n      const event = { target: { value: newState as string | number[] } }\n      // update global state\n      onChange(event)\n    }\n\n    const handleCancelDialog = () => {\n      console.log('cancelling')\n      // reset local variables\n      setLocalValue(initValue)\n      setLocalAlpha(initAlpha)\n      // close dialog\n      setDialogOpen(false)\n    }\n\n    const DialogTitle = `Colour Picker (${format.charAt(0).toUpperCase() + format.slice(1)})`\n\n    const hex: string = isHex\n      ? (localValue as string)\n      : (toHexColor(localValue as number[], format) as string)\n    // add alpha is required\n    let previewBG = hex\n    if (alpha) previewBG = hex + (localAlpha || 0 > 0 ? int8ToHex(floatToInt8(localAlpha)) : '00')\n\n    // check if dialog is actually required\n    const useDialog = alpha || ['uint16', 'float'].includes(format)\n\n    return (\n      <div ref={ref} className={className} style={style}>\n        <ColorPickerPreview\n          onClick={useDialog ? handleOpenDialog : undefined}\n          backgroundColor={previewBG}\n          value={hex}\n          onChange={!useDialog ? handleColorInputOnChange : undefined}\n          onBlur={() => !useDialog && handleConfirmDialog()}\n          ref={previewRef}\n        />\n        <Dialog header={DialogTitle} onHide={handleCancelDialog} visible={dialogOpen}>\n          <ColorInputs>\n            <ColorPickerPreview\n              onChange={handleColorInputOnChange}\n              backgroundColor={previewBG}\n              value={hex}\n            />\n            {isHex ? (\n              <div>\n                <label htmlFor={'hex'}>HEX</label>\n                <InputText\n                  id=\"hex\"\n                  value={localValue as string}\n                  onChange={handleOnChange}\n                  name=\"hex\"\n                  maxLength={7}\n                  placeholder={formatsConfig.hex.placeholder}\n                  required\n                  onKeyDown={(e) => e.key === 'Enter' && handleConfirmDialog()}\n                />\n              </div>\n            ) : (\n              channels.map((c, i) => {\n                const v = localValue[i]\n                return (\n                  <div key={c}>\n                    <label htmlFor={c}>{c.toUpperCase()}</label>\n                    <InputNumber\n                      id={c}\n                      min={0}\n                      max={formatsConfig[format].max}\n                      value={v}\n                      step={formatsConfig[format].step}\n                      onChange={handleOnChange}\n                      placeholder={formatsConfig[format].placeholder?.toString()}\n                      required\n                      onKeyDown={(e) => e.key === 'Enter' && handleConfirmDialog()}\n                    />\n                  </div>\n                )\n              })\n            )}\n            {alpha && (\n              <div key={'a'}>\n                <label htmlFor={'a'}>{'A'}</label>\n                <InputNumber\n                  id={'a'}\n                  min={0}\n                  max={1}\n                  value={localAlpha}\n                  step={0.01}\n                  onChange={(e) => setLocalAlpha(parseFloat(e.target.value))}\n                  placeholder={'0.5'}\n                  required\n                  onKeyDown={(e) => e.key === 'Enter' && handleConfirmDialog()}\n                />\n              </div>\n            )}\n          </ColorInputs>\n          <Confirmations>\n            <Button label={'Cancel'} onClick={handleCancelDialog} />\n            <Button label={'Apply'} onClick={handleConfirmDialog} />\n          </Confirmations>\n        </Dialog>\n      </div>\n    )\n  },\n)\n"],"names":["hexToFloat","hex","int8ToHex","value","floatToInt8","toHexColor","format","int8","v","validateHexColor","newValue","oldValue","floatToInt16","Wrapper","styled","Input","input","Checkerboard","ColorButton","button","ColorPickerPreview","forwardRef","onClick","onChange","backgroundColor","ref","_jsxs","onBlur","ColorInputs","Confirmations","formatsConfig","InputColor","alpha","className","isHex","initValue","initAlpha","previewRef","useRef","localValue","setLocalValue","useState","localAlpha","setLocalAlpha","dialogOpen","setDialogOpen","useEffect","channels","handleOnChange","e","id","targetValue","handleColorInputOnChange","value2","_a","floats","matches","handleOpenDialog","handleConfirmDialog","newState","console","newAlpha","handleCancelDialog","DialogTitle","previewBG","useDialog","style","undefined","_jsx","InputText","placeholder","c","i","InputNumber","max","step","Button"],"mappings":"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"}